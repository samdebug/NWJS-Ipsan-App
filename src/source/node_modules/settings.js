/**
 * 本地配置Util
 **/
var packageInfo = require('../package.json');
var path = require('path');
var SystemInfo = require('system').SystemInfo;

var Settings = function() {
  this.version = packageInfo.version;
  this.port = packageInfo.port;
  this.fs_max = packageInfo.fs_max;
  this.znv = packageInfo.znv;
  this.sync = packageInfo.sync;
  this.chosendir = packageInfo.chosendir;
  this.product_model = packageInfo.product_model;  
  this.fc = packageInfo.fc;
  this._system = new SystemInfo();
  this._settingDir = this._system.getSettingDir();
  this._settingFile = path.join(this._settingDir, 'settings.json');
  this._init();
  this.toJSON = function() {
    return {
      usedMachines: this.usedMachines
    };
  };
};

Settings.prototype._init = function() {
  var json = this._system.readJsonSync(this._settingFile);
  if (json !== undefined) {
    this.usedMachines = json.usedMachines;
  } else {
    this.usedMachines = [];
  }
};

Settings.prototype._saveSettings = function() {
  var _this = this;
  _this._system.mkdirAsync(_this._settingDir, null, function() {
    _this._system.writeJson(_this._settingFile, _this, function(err) {
      if (err) {
        throw new Error('Saving configs error !');
      }
    });
  });
};

Settings.prototype.getUsedMachines = function() {
  return this.usedMachines;
};

Settings.prototype.addUsedMachine = function(ip) {
  for (var i = 0; i < this.usedMachines.length; i += 1) {
    if (this.usedMachines[i] === ip) {
      return;
    }
  }

  this.usedMachines.push(ip);
  this._saveSettings();
};

exports.Settings = Settings;
