/**
 * 系统资源类
 **/
var fs = require('fs');
var path = require('path');
var os = require('os');

var SETTING_DIR = {
  "darwin": process.env.HOME + '/.config/zadmin/settings',
  "linux": process.env.HOME + '/.config/zadmin/settings',
  "win32": process.env.LOCALAPPDATA + '\\zadmin\\settings'
};

var SystemInfo = function () {
  this.localSystem = process.platform;
};

SystemInfo.prototype.getSettingDir = function () {
  if (this.localSystem in SETTING_DIR)
    return SETTING_DIR[this.localSystem];
  else
    throw new Error('Unsupported System !');
};

SystemInfo.prototype.mkdirAsync = function (url, mode, callback) {
  var _this = this;
  fs.exists(url, function (exists) {
    if (exists) {
      callback = callback || function () {
      };
      callback();
    } else {
      var dirPath = path.dirname(url);
      _this.mkdirAsync(dirPath, mode, function () {
        mode = mode || 0755;
        fs.mkdir(url, mode, function () {
          _this.mkdirAsync(url, mode, callback);
        });
      });
    }
  });
};

SystemInfo.prototype.readJson = function (url, /* optional */ encoding, callback) {
  if (arguments.length === 2) {
    var unicode = 'utf8';
    var cb = arguments[1];
    fs.readFile(url, unicode, this._afterReadJson.bind(this, cb));
  } else if (arguments.length === 3) {
    fs.readFile(url, encoding, this._afterReadJson.bind(this, callback));
  } else {
    throw new Error('The arguments calling the function is invalid.');
  }
};

SystemInfo.prototype.readJsonSync = function (url, /* optional */ encoding) {
  encoding = encoding || 'utf8';
  try {
    var data = fs.readFileSync(url, encoding);
    return JSON.parse(data);
  } catch (err) {
    if (err.code === 'ENOENT') {
      return undefined;
    }
  }
};

SystemInfo.prototype._afterReadJson = function (callback, err, data) {
  if (err) {
    return callback(err);
  }
  var json = JSON.parse(data);
  callback(err, json);
};

SystemInfo.prototype.writeJson = function (url, data, callback) {
  var json = JSON.stringify(data);
  fs.writeFile(url, json, callback);
};

SystemInfo.prototype.getLocalSystem = function () {
  return this.localSystem;
};

SystemInfo.prototype.iface_win_wrapper = function (ifaces) {
  var prefix_172_16 = '172.16';
  var netmask_172_16 = '255.255.0.0';
  var netmask_other = '255.255.255.0';

  var is_prefix_172_16 = function (addr) {
    var regex = /^\d{1,3}\.\d{1,3}/;
    var temp = addr.match(regex)[0];
    if (temp === prefix_172_16)
      return true;
    else
      return false;
  };

  for(var i = 0; i < ifaces.length; i += 1) {
    var item = ifaces[i];
    if(is_prefix_172_16(item.address)) {
      item.netmask = netmask_172_16;
    } else {
      item.netmask = netmask_other;
    }
  }

  return ifaces;
};

SystemInfo.prototype.getNetList = function () {
  var ifaces = [];
  var networks = os.networkInterfaces();
  for (var interface in networks) {
    var items = networks[interface];
    for (var i = 0; i < items.length; i += 1) {
      var item = items[i];
      if (item.family === 'IPv4' && item.address !== '127.0.0.1')
        ifaces.push(item);
    }
  }
  if(this.localSystem === 'win32') {
    ifaces = this.iface_win_wrapper(ifaces);
  }

  return ifaces;
};

exports.SystemInfo = SystemInfo;